- name: Deploy Next.js app to EC2
  hosts: nextjs_servers
  gather_facts: yes
  become: yes
  vars:
    app_dir: /home/ec2-user/app
    app_owner: ec2-user
    app_group: ec2-user
    app_repo: https://github.com/mrdaiking/test_ansible.git
    app_branch: main
    app_subdir: my-nextjs-app
  tasks:
    - name: Check if Node.js is installed
      ansible.builtin.command: node -v
      register: node_check
      ignore_errors: true
      changed_when: false

    - name: Ensure prerequisites are installed on Amazon/RedHat (dnf)
      when: (ansible_facts.os_family | lower) in ["redhat"] or (ansible_facts.distribution == 'Amazon')
      ansible.builtin.dnf:
        name:
          - git
          - ca-certificates
        state: present

    - name: Ensure prerequisites are installed on Debian/Ubuntu (apt)
      when: (ansible_facts.os_family | lower) in ["debian"]
      ansible.builtin.apt:
        name:
          - git
          - curl
          - ca-certificates
        state: present
        update_cache: yes

    - name: Ensure application directory exists
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_owner }}"
        group: "{{ app_group }}"
        mode: "0755"

    - name: Checkout application repository
      ansible.builtin.git:
        repo: "{{ app_repo }}"
        dest: "{{ app_dir }}"
        version: "{{ app_branch }}"
        force: yes
        update: yes
      become_user: "{{ app_owner }}"

    - name: Determine if app_subdir exists
      ansible.builtin.stat:
        path: "{{ app_dir }}/{{ app_subdir }}"
      register: app_subdir_path

    - name: Set working_dir
      ansible.builtin.set_fact:
        working_dir: "{{ app_dir ~ '/' ~ app_subdir if (app_subdir_path.stat.isdir | default(false)) else app_dir }}"

    - name: Install Node.js 18.x on Amazon Linux 2023
      when: ansible_facts.distribution == 'Amazon' and ansible_facts.distribution_major_version == '2023' and (node_check.rc is defined and node_check.rc != 0)
      ansible.builtin.shell: |
        set -e
        sudo dnf -y install nodejs
      args:
        executable: /bin/bash

    - name: Install Node.js 18.x via NodeSource on Debian/Ubuntu
      when: (ansible_facts.os_family | lower) in ["debian"] and (node_check.rc is defined and node_check.rc != 0)
      ansible.builtin.shell: |
        set -e
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
      args:
        executable: /bin/bash

    - name: Check if pm2 is installed
      ansible.builtin.command: pm2 -v
      register: pm2_check
      ignore_errors: true
      changed_when: false

    - name: Ensure pm2 is installed globally
      when: pm2_check.rc is defined and pm2_check.rc != 0
      ansible.builtin.shell: |
        set -e
        sudo npm install -g pm2
      args:
        executable: /bin/bash

    - name: Install dependencies (npm ci if lockfile exists)
      become_user: "{{ app_owner }}"
      ansible.builtin.shell: |
        set -e
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
      args:
        chdir: "{{ working_dir }}"
        executable: /bin/bash

    - name: Build Next.js app
      become_user: "{{ app_owner }}"
      ansible.builtin.shell: |
        set -e
        npm run build
      args:
        chdir: "{{ working_dir }}"
        executable: /bin/bash

    - name: Start or restart app with PM2
      become_user: "{{ app_owner }}"
      ansible.builtin.shell: |
        set -e
        pm2 start npm --name "nextjs-app" -- run start || pm2 restart nextjs-app
        pm2 save
      args:
        chdir: "{{ working_dir }}"
        executable: /bin/bash

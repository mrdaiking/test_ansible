name: Deploy with Ansible

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key (robust)
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Normalize the key from secret: supports raw PEM, base64, or escaped newlines
          TMP_KEY=$(mktemp)
          printf "%s" "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > "$TMP_KEY"
          # Convert Windows CRLF and unescape literal \n
          # If the file contains literal backslash-n sequences, convert them to real newlines
          if grep -q "\\\\n" "$TMP_KEY"; then
            sed 's/\\\\n/\n/g' "$TMP_KEY" > "$TMP_KEY.conv"
            mv "$TMP_KEY.conv" "$TMP_KEY"
          fi
          # Strip any CR characters
          tr -d '\r' < "$TMP_KEY" > "$TMP_KEY.nocr"
          mv "$TMP_KEY.nocr" "$TMP_KEY"
          # Detect if it's PEM; if not, try base64 decode
          if grep -q "BEGIN .*PRIVATE KEY" "$TMP_KEY"; then
            cp "$TMP_KEY" ~/.ssh/id_rsa
          else
            if base64 -d "$TMP_KEY" > ~/.ssh/id_rsa 2>/dev/null; then
              :
            else
              echo "Private key secret is neither PEM nor valid base64; please fix ANSIBLE_SSH_PRIVATE_KEY." >&2
              exit 1
            fi
          fi
          chmod 600 ~/.ssh/id_rsa
          # Validate key
          if ! ssh-keygen -y -f ~/.ssh/id_rsa >/dev/null 2>&1; then
            echo "Invalid private key format; ensure the secret contains an unencrypted private key." >&2
            exit 1
          fi
          # Start agent and add key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          rm -f "$TMP_KEY"

      - name: Prepare known_hosts (optional)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [[ -n "${{ secrets.ANSIBLE_HOST }}" ]]; then
            # Don't fail the job if keyscan can't reach the host yet
            ssh-keyscan -H "${{ secrets.ANSIBLE_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || true
          fi

      - name: Show runner public IP (for Security Group allowlist)
        shell: bash
        run: |
          set -euo pipefail
          echo "Runner public IP:" $(curl -fsSL https://checkip.amazonaws.com || echo "unknown")
          echo "Target host: ${{ secrets.ANSIBLE_HOST }}"

      - name: Check SSH reachability to target
        shell: bash
        run: |
          set -euo pipefail
          HOST="${{ secrets.ANSIBLE_HOST }}"
          echo "Checking TCP/22 to ${HOST}..."
          if command -v nc >/dev/null 2>&1; then
            nc -vz -w 5 "$HOST" 22 || {
              echo "Cannot reach ${HOST}:22 from GitHub runner. Likely Security Group, NACL, subnet, or no public IP." >&2
              exit 1
            }
          else
            # Fallback using bash's /dev/tcp
            timeout 6 bash -c "</dev/tcp/${HOST}/22" 2>/dev/null || {
              echo "Cannot reach ${HOST}:22 from GitHub runner. Likely Security Group, NACL, subnet, or no public IP." >&2
              exit 1
            }
          fi

      - name: Run Ansible Playbook 1
        shell: bash
        run: |
          set -euo pipefail
          : "${{ secrets.ANSIBLE_HOST }}" # ensure secret is present
          USER_TO_USE="ec2-user"
          # Connect without strict host key checking to avoid failures on first contact
          ssh -o StrictHostKeyChecking=no "${USER_TO_USE}@${{ secrets.ANSIBLE_HOST }}" "ansible-playbook ~/deploy.yml"
